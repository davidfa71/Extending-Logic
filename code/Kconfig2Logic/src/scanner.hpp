// $Id: scanner.h 17 2007-08-19 18:51:39Z tb $

#ifndef KCONF_SCANNER_H
#define KCONF_SCANNER_H

#  ifndef FLEX_STD
#    define FLEX_STD std::
#  endif

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    kconf::Parser::symbol_type				\
    kconf::Scanner::lex(Driver& driver)
#endif

#ifndef __FLEX_LEXER_H  	
#define yyFlexLexer KconfFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include <iterator>

#include "parser.hpp"
#include "tokens.hash.hpp"
#include <glob.h>

#include <fstream>

namespace kconf {

/** Scanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to KconfFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the Scanner class. This is required
 * because the yylex() defined in KconfFlexLexer has no parameters. */
    
    
class globcontrol {
    public:
    globcontrol(int gm, std::vector<std::string> gn) : globmatches(gm), globnames(gn) { globindex = 0; };
        int                      globmatches, globindex;
        std::vector<std::string> globnames;
        
    };
    
class Scanner : public KconfFlexLexer
{
    
private:
    
    int                         numFiles;
    std::string                *temp;
    std::string                 filename, initialFile;
    std::string                 workingdir;
    std::vector<globcontrol>    globStack;
    std::vector<std::string>    nameStack;
    std::vector<std::ifstream*> streamStack;
    std::vector<location>       locStack;
    double                      lastTime;
    glob_t                      myglob;
    int                         globindex;
    bool                        firstPass;

public:
    
    std::string curfile() {  return nameStack.back(); };
    
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    Scanner(std::string bd, std::string name, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

  
    /** Required for virtual functions */
    virtual ~Scanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual Parser::symbol_type lex(Driver& driver);

    virtual int endfile();
    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);
    
    void starthelp();
    void endhelp();
    void nextfile(std::string name);
    int  checkNextFiles(std::string name);
    void fileHelper();
   
     
};

} // namespace kconf

#endif // KCONF_SCANNER_H
