// $Id: scanner.h 17 2007-08-19 18:51:39Z tb $

#ifndef KCONF_SYNEXPSCANNER_H
#define KCONF_SYNEXPSCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    kconf::synExpParser::symbol_type				\
    kconf::synExpScanner::lex(synExpDriver& driver)
#endif

#ifndef __FLEX_LEXER_H  	
#define yyFlexLexer synExpFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "synExpParser.hpp"


#include <fstream>

namespace kconf {

/** Scanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to KconfFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the Scanner class. This is required
 * because the yylex() defined in KconfFlexLexer has no parameters. */
    

class synExpScanner : public synExpFlexLexer
{
    
private:
    
    std::string filename;

public:
    
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    synExpScanner(std::string filename, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

  
    /** Required for virtual functions */
    virtual ~synExpScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual synExpParser::symbol_type lex(synExpDriver& driver);

       /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);
     
};

} // namespace kconf

#endif // KCONF_SYNEXPSCANNER_H
