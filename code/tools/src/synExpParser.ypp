%{ /*** C/C++ Declarations ***/

#include <stdio.h>
#include <string>
#include <vector>
#include <list>
#include <set>


%}
/*** yacc/bison Declarations ***/

/* Require bison 3.0 or later */
%require "3.0"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start explist

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%define api.namespace {kconf}

/* set the parser's class identifier */
%define api.parser.class {synExpParser}
%define api.token.constructor
%define api.value.type variant

//%define parse.assert

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
//%parse-param { class Driver& driver }
// The parsing context.
%param { class synExpDriver& driver }
/* verbose error messages */
%define parse.error verbose
%code requires {
    #include "varInfo.hpp"
    #include "synExp.hpp"
    
    struct kconf_id;
    bool is_digits(const std::string &str);
}

%token <kconf_id*>T_MAINMENU
%token <kconf_id*>T_MENU



%token <std::string> T_LITERAL
%token <std::string> T_SYMBOL

%token T_TRUE
%token T_FALSE
%token T_MODULE
%token T_IF
%token T_THEN
%token T_ELSE
%token T_UNEQUAL
%token T_CLOSEPAREN
%token T_OPENPAREN
//%token T_COMMA
%token T_EOL
%token T_XOR
%token T_EOF 0


%right    T_IMPLIES
%left     T_OR
%left     T_AND
%left     T_EQUAL T_UNEQUAL
%nonassoc T_NOT

%type<synExp*> exp;
%type<std::vector<synExp*>> seqexp;

%printer { yyoutput << $$; } <std::string>;


%{

#include "synExpDriver.hpp"
#include "synExpScanner.hpp"
#include "varInfo.hpp"


/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex

%}

%% /*** Grammar Rules ***/


explist : explist exp T_EOL {
    driver.addExp($2);
};

explist : exp T_EOL {
    driver.addExp($1);
};

explist : T_EOF {
    
}
exp : exp T_AND exp {
    $$ = new synCompound(synAnd, $1, $3);
};

exp : exp T_OR exp {
    $$ = new synCompound(synOr, $1, $3);
};

exp : T_NOT exp {
    $$ = new synCompound(synNot, $2);
};

exp : T_XOR T_OPENPAREN seqexp T_CLOSEPAREN {
    $$ = new synXOR($3);
};

seqexp : exp {
    $$.push_back($1);
}

seqexp : seqexp exp {
    $$ = $1;
    $$.push_back($2);
}

seqexp : {
}

exp : T_IF exp T_THEN exp T_ELSE exp {
    $$ = new synCompound(synIfThenElse, $2, $4, $6);
};

exp : T_IF exp T_THEN exp {
    $$ = new synCompound(synIfThenElse, $2, $4, synTrue);
};

exp : T_OPENPAREN exp T_CLOSEPAREN {
    $$ = $2;
};

exp : exp T_IMPLIES exp {
    $$ = new synCompound(synImplies, $1, $3);
};

exp : exp T_EQUAL exp {
    $$ = new synCompound(synEqual, $1, $3);
};

exp : T_TRUE {
    $$ = synTrue;
};

exp : T_FALSE {
    $$ = synFalse;
};

exp : T_MODULE {
    $$ = synModule;
};

exp : T_LITERAL {
    $$ = new synString($1);
};

exp : T_SYMBOL {
    $$ = new synSymbol($1);
};

exp : T_EOL {
    $$ = synFalse;
}
%% /*** Additional Code ***/
bool is_digits(const std::string &str)
{
    return str.find_first_not_of("0123456789") == std::string::npos;
}
void kconf::synExpParser::error(const synExpParser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}

