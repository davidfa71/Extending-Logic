/* $Id: synExpScanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the kconf Flex lexical scanner */

%{ /*** C/C++ Declarations ***/

#include <string>
#include <vector>
#include <fstream>
#include <stdio.h>
#include <iomanip>

#include "synExpScanner.hpp"
#include "mytime.hpp"

/* import the parser's token type into a local typedef */
typedef kconf::synExpParser::token token;
typedef kconf::synExpParser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() { return synExpParser::make_T_EOF(loc); }

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H
    
    std::string text;
    int last_ts, first_ts;
    
    // The location of the current token.
    static kconf::location loc;
%}

/*** Flex Declarations and Options ***/

/* enable c++ scanner class generation */
%option c++

/* change the name of the scanner class. results in "KconfFlexLexer" */
%option prefix="synExp"

/* the manual says "somewhat more optimized" */
%option batch

/* enable scanner to generate debug output. disable this for release
 * versions. */
%option debug

/* enables the use of start condition stacks */
%option stack

/* We'll handle the files manually */
%option noyywrap

ws	[ \n\t]
n	[A-Za-z0-9_]

%{
    // Code run each time a pattern is matched.
    # define YY_USER_ACTION  loc.columns (yyleng);
 
%}

%% /*** Regular Expressions Part ***/

%{
    // Code run each time yylex is called.
    loc.step ();
    text.clear();
%}


synTrue             { return synExpParser::make_T_TRUE(loc);                }
synFalse            { return synExpParser::make_T_FALSE(loc);               }
synModule           { return synExpParser::make_T_MODULE(loc);              }
if|IF               { return synExpParser::make_T_IF(loc);                  }
then|THEN           { return synExpParser::make_T_THEN(loc);                }
else|ELSE           { return synExpParser::make_T_ELSE(loc);                }
and|AND             { return synExpParser::make_T_AND(loc);                 }
or|OR               { return synExpParser::make_T_OR(loc);                  }
\(                  { return synExpParser::make_T_OPENPAREN(loc);           }
\)                  { return synExpParser::make_T_CLOSEPAREN(loc);          }
not|NOT             { return synExpParser::make_T_NOT(loc);                 }
=                   { return synExpParser::make_T_EQUAL(loc);               }
!=                  { return synExpParser::make_T_UNEQUAL(loc);             }
->                  { return synExpParser::make_T_IMPLIES(loc);             }
XOR|Xor|xor         { return synExpParser::make_T_XOR(loc);                 }
\"[^\"*]\"   {
            return synExpParser::make_T_LITERAL(std::string(yytext, 1, strlen(yytext) - 2), loc);     }

[a-zA-Z_0-9:\\\/@$\-\+\.\,!{}]+     {
    return synExpParser::make_T_SYMBOL(yytext, loc);      }
\n                  { loc.lines(1); return synExpParser::make_T_EOL(loc);   }
.                   { };

%% /*** Additional Code ***/
      

namespace kconf {
      
      synExpScanner::synExpScanner(std::string filename, std::istream* in, std::ostream* out)
      : synExpFlexLexer(in, out), filename(filename) {
          loc.initialize(&this->filename);
      }
     
    synExpScanner::~synExpScanner()
{
}

void synExpScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

} // namespace Kconf

/* This implementation of KconfFlexLexer::yylex() is required to fill the
 * vtable of the class KconfFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int synExpFlexLexer::yylex()
{
    std::cerr << "in synExpFlexLexer::yylex() !" << std::endl;
    return 0;
}





